
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;


public class Manage_category extends javax.swing.JFrame {

    
    

  
    public Manage_category() {
        initComponents();
        setVisible(true);
        setSize(800,600);
        jTable2.setModel(tm);
       arrayLoader();
        setResizable(false);
        BufferedImage img;
        try {
            img = ImageIO.read(new File("src/pictures/adm.png"));
            BufferedImage newimg = resize(img ,back.getWidth(),back.getHeight());
            back.setIcon(new ImageIcon(newimg));
        } catch (IOException ex) {
            Logger.getLogger(AdminLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
     }
    ArrayList<category> alcategory = new ArrayList<>();
    mytablemodel tm = new mytablemodel();    
   class mytablemodel extends AbstractTableModel
   {

        @Override
        public int getRowCount() {
          return alcategory.size();
        }

        @Override
        public int getColumnCount() {
         return 3;   
        }

        @Override
        public Object getValueAt(int i, int j) {
        if(j==0)
        {
            return alcategory.get(i).catname;
        }
        else if(j==1)
        {
            return alcategory.get(i).Description;
        }
          else if(j==2)
        {
            return alcategory.get(i).photo;
        }
        else
            return null;
        }
        @Override
        public String getColumnName(int j)
        {
            String col[] = {"catname" , "Description" , "photo"};
            return col[j];
        }
       
   }
 
 class ImageRenderer extends DefaultTableCellRenderer {

        JLabel lbl = new JLabel();

        ImageIcon icon = new ImageIcon("");
        BufferedImage bufferedImage, newimage;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            try {
                URL url = new URL("http://localhost:8888/GetResource/" + alcategory.get(row).photo);
                bufferedImage = ImageIO.read(url);
                newimage = resize(bufferedImage, 100, 100);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            icon = new ImageIcon(newimage);
            lbl.setIcon(icon);
            lbl.setBounds(0, 0, 100, 100);
            return lbl;
        }
        BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
     }
 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Catagories");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 800, 50);

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setText("Delete Category");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(340, 510, 120, 30);

        jTable2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));
        jTable2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(jTable2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 80, 760, 380);
        getContentPane().add(back);
        back.setBounds(-6, 0, 810, 610);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      try
      {
        int index = jTable2.getSelectedRow();        
      if(index == -1)
      {
          JOptionPane.showMessageDialog(this, "Plz Select Row!!");
      }
      else
             {
                   
               try {
                  HttpResponse<String> res = Unirest.get("http://localhost:8888/Deletecategory")
                            .queryString("catname",alcategory.get(index).catname).asString();
                  String response = res.getBody();
                  if (response.equals("success")) 
                {
                    JOptionPane.showMessageDialog(this, "Deleted Successfully!!");
                } else 
                {
                    JOptionPane.showMessageDialog(this, "Failed!!!!");
                }
               }
               catch (UnirestException ex) {
                 Logger.getLogger(Add_category.class.getName()).log(Level.SEVERE, null, ex);
               }
             }
      }
      catch (Exception ex)
      {
          ex.printStackTrace();
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manage_category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manage_category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manage_category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manage_category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manage_category().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
class category
{
    String catname;
    String Description;
    String photo;
    
    category(String catname , String Description , String photo)
    {
        this.catname = catname;
        this.Description = Description;
        this.photo = photo;
    }
    
}
 void arrayLoader()
    {
        try
        {
             HttpResponse<String> res = Unirest.get("http://localhost:8888/Load").asString();
             String data = res.getBody().trim();
             StringTokenizer st = new StringTokenizer(data,";;");
             while(st.hasMoreTokens())
             {
                 String row = st.nextToken();
                 StringTokenizer stcol = new StringTokenizer(row,"~");
                 String catname = stcol.nextToken();
                 String Description = stcol.nextToken();
                 String photo = stcol.nextToken();
                 alcategory.add(new category(catname , Description , photo));
             }
             if(alcategory.size()>0)
             {
                 jTable2.getColumnModel().getColumn(2).setCellRenderer(new ImageRenderer());
                  jTable2.setRowHeight(100);
             }
             tm.fireTableDataChanged();
                    
             
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

}
