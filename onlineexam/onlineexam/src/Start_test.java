
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab-3_8
 */
public class Start_test extends javax.swing.JFrame {
 JButton ar[] = new  JButton[GlobalData.alq.size()];

    Thread t1 = new Thread(new time());
    int current = 0;
    public Start_test() {
        initComponents();
        setSize(800,600);
        load_question(current);
        buttonGroup1.add(rb1);
        buttonGroup1.add(rb2);
        buttonGroup1.add(rb3);
        buttonGroup1.add(rb4);
       
        int x=10,y=10;
        for(int i=0; i< GlobalData.alq.size(); i++)
        {
            ar[i] = new JButton((i+1)+"");
            ar[i].setBounds(x,y,50,40);
            jPanel1.add(ar[i]);
            jPanel1.repaint();
            x= x+50;
            final int k=1;
            ar[i].addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e) {
                    load_question(k);
                }
            });
        }
        setResizable(false);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         BufferedImage img;
        try {
            img = ImageIO.read(new File("src/pictures/back.jpg"));
            BufferedImage newimg = resize(img ,back.getWidth(),back.getHeight());
            back.setIcon(new ImageIcon(newimg));
        } catch (IOException ex) {
            Logger.getLogger(AdminLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
        t1.start(); 
        question.setEnabled(false);
    }
      BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }
        
    

 void load_question(int i)
{
   current = i;
    category.setText(GlobalData.categoryselected);
category.getText();
     sno.setText((i+1)+"");
    String Question = GlobalData.alq.get(i).Question;
    question.setText(Question);
    String OptionA = GlobalData.alq.get(i).OptionA;
    optionA.setText(OptionA);
    String OptionB = GlobalData.alq.get(i).OptionB;
    optionB.setText(OptionB);
    String OptionC = GlobalData.alq.get(i).OptionC;
    optionC.setText(OptionC);
    String OptionD = GlobalData.alq.get(i).OptionD;
    optionD.setText(OptionD);
    if(GlobalData.alq.get(i).getUserans().equals(""))
    {
        buttonGroup1.clearSelection();
        submit.setEnabled(true);
    }
    else
    {
        String opt = GlobalData.alq.get(i).getUserans().trim();
        if(opt.equals("OptionA"))
        {
            rb1.setSelected(true);
        }
        else if(opt.equals("OptionB"))
        {
            rb2.setSelected(true);
        }
         else if(opt.equals("OptionC"))
        {
            rb3.setSelected(true);
        }
         else if(opt.equals("OptionC"))
        {
            rb4.setSelected(true);
        }
    }

 if(current == 0)
 {
     previous.setEnabled(false);
 }
 else if (current == 14)
 {
     next.setEnabled(false);
 }
 else{
     previous.setEnabled(true);
     next.setEnabled(true);
 }
}
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
      

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        question = new javax.swing.JTextArea();
        rb4 = new javax.swing.JRadioButton();
        rb1 = new javax.swing.JRadioButton();
        rb2 = new javax.swing.JRadioButton();
        rb3 = new javax.swing.JRadioButton();
        optionD = new javax.swing.JLabel();
        optionA = new javax.swing.JLabel();
        optionB = new javax.swing.JLabel();
        optionC = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        end = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        sno = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        category = new javax.swing.JLabel();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Question");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(60, 110, 100, 20);

        question.setColumns(20);
        question.setRows(5);
        jScrollPane1.setViewportView(question);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(190, 70, 550, 120);

        buttonGroup1.add(rb4);
        rb4.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        rb4.setText("OptionD");
        rb4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(rb4);
        rb4.setBounds(80, 340, 130, 31);

        buttonGroup1.add(rb1);
        rb1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        rb1.setText("OptionA");
        rb1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb1ActionPerformed(evt);
            }
        });
        getContentPane().add(rb1);
        rb1.setBounds(80, 220, 100, 31);

        buttonGroup1.add(rb2);
        rb2.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        rb2.setText("OptionB");
        rb2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb2ActionPerformed(evt);
            }
        });
        getContentPane().add(rb2);
        rb2.setBounds(80, 260, 130, 31);

        buttonGroup1.add(rb3);
        rb3.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        rb3.setText("OptionC");
        rb3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(rb3);
        rb3.setBounds(80, 300, 130, 31);
        getContentPane().add(optionD);
        optionD.setBounds(190, 340, 260, 20);
        getContentPane().add(optionA);
        optionA.setBounds(190, 220, 260, 20);
        getContentPane().add(optionB);
        optionB.setBounds(190, 260, 260, 20);
        getContentPane().add(optionC);
        optionC.setBounds(190, 300, 260, 20);

        time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(time);
        time.setBounds(600, 10, 90, 20);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Timer");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(550, 10, 50, 17);

        previous.setBackground(new java.awt.Color(102, 255, 204));
        previous.setText("Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });
        getContentPane().add(previous);
        previous.setBounds(30, 423, 90, 30);

        next.setBackground(new java.awt.Color(102, 255, 204));
        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        getContentPane().add(next);
        next.setBounds(670, 430, 90, 30);

        submit.setBackground(new java.awt.Color(102, 255, 204));
        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });
        getContentPane().add(submit);
        submit.setBounds(370, 520, 100, 30);

        end.setBackground(new java.awt.Color(102, 255, 204));
        end.setText("End test");
        end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endActionPerformed(evt);
            }
        });
        getContentPane().add(end);
        end.setBounds(700, 540, 73, 23);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jPanel1);
        jPanel1.setBounds(160, 410, 470, 70);

        sno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(sno);
        sno.setBounds(80, 140, 50, 30);

        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(status);
        status.setBounds(540, 40, 200, 20);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("Category");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(220, 10, 100, 30);

        category.setBackground(new java.awt.Color(255, 255, 255));
        category.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        category.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(category);
        category.setBounds(330, 0, 110, 50);
        getContentPane().add(back);
        back.setBounds(0, 0, 820, 640);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed

                     current = current+1;    
                     load_question(current);
             
    }//GEN-LAST:event_nextActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
         current = current-1;
        load_question(current);
            
    }//GEN-LAST:event_previousActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        String ans = "";
        if(rb1.isSelected())
        {
            ans = rb1.getText();
        }
        else if (rb2.isSelected())
        {
            ans = rb2.getText();
        }
        else if (rb3.isSelected())
        {
            ans = rb3.getText();
        }
        else if (rb4.isSelected())
        {
            ans = rb4.getText();
        }
        System.out.println(ans);
        int x = Integer.parseInt(sno.getText());
        ar[x-1].setBackground(Color.GREEN);
        GlobalData.alq.get(x-1).setUserans(ans);
        System.out.println(GlobalData.alq.get(x-1).getUserans());
        submit.setEnabled(false);

    }//GEN-LAST:event_submitActionPerformed

    private void endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endActionPerformed
       previous.setEnabled(false);
       next.setEnabled(false);
       submit.setEnabled(false);
       t1.stop();
       Answer as = new Answer();
       as.setVisible(true);
       dispose();       
    }//GEN-LAST:event_endActionPerformed

    private void rb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rb2ActionPerformed

    private void rb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rb1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start_test().setVisible(true);
            }
        });
    
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel category;
    private javax.swing.JButton end;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton next;
    private javax.swing.JLabel optionA;
    private javax.swing.JLabel optionB;
    private javax.swing.JLabel optionC;
    private javax.swing.JLabel optionD;
    private javax.swing.JButton previous;
    private javax.swing.JTextArea question;
    private javax.swing.JRadioButton rb1;
    private javax.swing.JRadioButton rb2;
    private javax.swing.JRadioButton rb3;
    private javax.swing.JRadioButton rb4;
    private javax.swing.JLabel sno;
    private javax.swing.JLabel status;
    private javax.swing.JButton submit;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
class time implements Runnable
{
        @Override
        public void run() {
            time.setBackground(Color.YELLOW);
            time.setOpaque(true);
            int min = 1 , sec = 60;  
            while(true)
            {
                try {
                    if(min==0 && sec == 0)
                    {
                        status.setBackground(Color.WHITE);
                        status.setForeground(Color.BLACK);
                        status.setOpaque(true);
                        status.setText("----TIME UP----");
                        break;
                    }
                    else if(min>0 && sec == 0)
                    {
                        status.setBackground(Color.WHITE);
                        status.setForeground(Color.BLACK);
                        status.setOpaque(true);
                        status.setText("----ONE MINUTE LEFT----");
                        min--;
                        sec = 59;                 
                    }
                    else if(min==0 && sec == 20)
                    {
                        status.setBackground(Color.RED);
                        status.setForeground(Color.WHITE);
                        status.setText("!!! HURRY FEW SECONDS LEFT !!!");
                        status.setOpaque(true);
                        sec--;
                    }          
                    else 
                    {
                        sec--;
                    }
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Start_test.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println(min + "min :" + sec+"sec:");
            time.setText(min + "min :" + sec+"sec:");
}           
           

        }
    
}



}
