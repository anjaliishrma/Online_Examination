
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.AbstractTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab-3_8
 */
public class Manager_Question extends javax.swing.JFrame {
        ArrayList<Question> alQuestion = new ArrayList<>();
       mytablemodel2 tm ;
void loadcatname()
    {
        try
        {
             HttpResponse<String> res = Unirest.get("http://localhost:8888/Getcategory").asString();
             String data = res.getBody().trim();
             StringTokenizer st = new StringTokenizer(data,"~");
             while(st.hasMoreTokens())
             {
                 String Name = st.nextToken();
                 Category.addItem(Name);

              
             }
             
         
        }
             catch (Exception ex)
                     {
                     ex.printStackTrace();
                     }
                
    }
 
    public Manager_Question() {
        initComponents();
        setSize(800,600);
        setVisible(true);
          setResizable(false);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         BufferedImage img;
        try {
            img = ImageIO.read(new File("src/pictures/adm.png"));
            BufferedImage newimg = resize(img ,back.getWidth(),back.getHeight());
            back.setIcon(new ImageIcon(newimg));
        } catch (IOException ex) {
            Logger.getLogger(AdminLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
        tm = new mytablemodel2();
        loadcatname();
        
        jTable1.setModel(tm);
     }
     BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }
     
   class mytablemodel2 extends AbstractTableModel
   {

        @Override
        public int getRowCount() {
          return alQuestion.size();
           
        }

        @Override
        public int getColumnCount() {
         return 7;   
        }

        @Override
        public Object getValueAt(int i, int j) {
        if(j==0)
        {
            return alQuestion.get(i).Qid;
        }
        else if(j==1)
        {
            return alQuestion.get(i).Question;
        }
          else if(j==2)
        {
            return alQuestion.get(i).OptionA;
        }
          else if(j==3)
          {
              return alQuestion.get(i).OptionB;
          }
          else if(j==4)
          {
              return alQuestion.get(i).OptionC;
          }
          else if(j==5)
          {
              return alQuestion.get(i).OptionD;
          }
          else if(j==6)
          {
              return alQuestion.get(i).Correctanswer;
          }
        else
            return null;
        }
        @Override
        public String getColumnName(int j)
        {
            String col[] = {"Qid" , "Question" , "OptionA", "OptionB", "OptionC", "OptionD", "Correctanswer"};
            return col[j];
        }
       
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Category = new javax.swing.JComboBox<String>();
        view = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Question");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 800, 50);

        getContentPane().add(Category);
        Category.setBounds(280, 90, 270, 40);

        view.setBackground(new java.awt.Color(102, 255, 204));
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        getContentPane().add(view);
        view.setBounds(600, 100, 60, 20);

        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 160, 760, 320);

        delete.setBackground(new java.awt.Color(255, 153, 0));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(330, 530, 110, 30);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Category");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(140, 90, 100, 30);
        getContentPane().add(back);
        back.setBounds(-6, 0, 810, 610);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        String name = (String) Category.getSelectedItem();
        arrayLoader(name);
        
    }//GEN-LAST:event_viewActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try
      {
        int index = jTable1.getSelectedRow();        
      if(index == -1)
      {
          JOptionPane.showMessageDialog(this, "Plz Select Row!!");
      }
      else
             {
                   
               try {
                  HttpResponse<String> res = Unirest.get("http://localhost:8888/Deletequestion")
                            .queryString("Qid",alQuestion.get(index).Qid).asString();
                  String response = res.getBody();
                  if (response.equals("success")) 
                {
                    JOptionPane.showMessageDialog(this, "Deleted Successfully!!");
                } else 
                {
                    JOptionPane.showMessageDialog(this, "Failed!!!!");
                }
               }
               catch (UnirestException ex) {
                 Logger.getLogger(Add_category.class.getName()).log(Level.SEVERE, null, ex);
               }
             }
      }
      catch (Exception ex)
      {
          ex.printStackTrace();
      }
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manager_Question.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manager_Question.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manager_Question.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager_Question.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manager_Question().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Category;
    private javax.swing.JLabel back;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
class Question
{
    String Qid;
    String Question ;
    String OptionA;
    String OptionB;
    String OptionC;
    String OptionD;
    String Correctanswer;


    
    Question(String Qid , String Question ,String OptionA , String OptionB ,String OptionC, String OptionD , String Correctanswer)
    {
        this.Qid = Qid;
        this.Question = Question;
        this.OptionA = OptionA;
        this.OptionB = OptionB;
        this.OptionC = OptionC;
        this.OptionD = OptionD;
        this.Correctanswer = Correctanswer ;
    }
    
 
}
void arrayLoader(String Category)
    {
        try
        {
             HttpResponse<String> res = Unirest.get("http://localhost:8888/Getquestion")
                     .queryString("category",Category)
                     .asString();
             String data = res.getBody().trim();
             System.out.println(data);
             StringTokenizer st = new StringTokenizer(data,";;@");
             while(st.hasMoreTokens())
             {
                 String row = st.nextToken();
                 System.out.println(row);
                 StringTokenizer stcol = new StringTokenizer(row,"#!~");
                 String Qid = stcol.nextToken();
                 System.out.println(Qid);
                 String Question = stcol.nextToken();
                 System.out.println(Question);
                 String OptionA = stcol.nextToken();
                 System.out.println(OptionA);
                 String OptionB = stcol.nextToken();
                 System.out.println(OptionB);
                 String OptionC = stcol.nextToken();
                 System.out.println(OptionC);
                 String OptionD = stcol.nextToken();
                 System.out.println(OptionD);
                 String Correctanswer = stcol.nextToken();
                 System.out.println(Correctanswer);
                 alQuestion.add(new Question(Qid,Question,OptionA,OptionB,OptionC,OptionD,Correctanswer));
             }
             
             tm.fireTableDataChanged();
             
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }



}





 
